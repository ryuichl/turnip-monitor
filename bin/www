#!/usr/bin/env node

/**
 * Module dependencies.
 */
;(async function () {
    require('dotenv').config()
    const app = require('../app')
    const debug = require('debug')('turnip:server')
    const http = require('http')
    const Knex = require('knex')
    const { Model } = require('objection')

    /**
     * Get port from environment and store in Express.
     */

    const port = normalizePort(process.env.PORT || '3000')
    app.set('port', port)

    /**
     * Create HTTP server.
     */
    const knex = Knex({
        client: 'pg',
        connection: {
            connectionString: process.env.pg
        }
    })
    await knex.select(knex.raw('1'))
    Model.knex(knex)
    console.log('connected db successfully')
    const server = http.createServer(app)

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port, (error) => {
        if (error) {
            console.error(error)
            return process.exit(1)
        } else {
            console.log('Listening on port: ' + port + '.')
        }
    })
    server.on('error', onError)
    server.on('listening', onListening)

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        const port = parseInt(val, 10)

        if (isNaN(port)) {
            // named pipe
            return val
        }

        if (port >= 0) {
            // port number
            return port
        }

        return false
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error
        }

        const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges')
                process.exit(1)
                break
            case 'EADDRINUSE':
                console.error(bind + ' is already in use')
                process.exit(1)
                break
            default:
                throw error
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        const addr = server.address()
        const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
        debug('Listening on ' + bind)
    }
})()
